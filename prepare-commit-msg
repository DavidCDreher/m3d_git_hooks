#!/usr/bin/env python3

import sys

import hook_utils

# Taken from: https://chris.beams.io/posts/git-commit/
# Reordered for line length visibility at top
GOOD_COMMIT_RULES = [
    " 1: Limit the subject line to 50 characters: ~~~^",
    " 2: Wrap the body at 72 characters: " + 34 * "~" + "^",
    " 3: Separate subject from body with a blank line",
    " 4: Capitalize the subject line",
    " 5: Do not end the subject line with a period",
    " 6: Use the imperative mood in the subject line",
    " 7: Use the body to explain what and why vs. how",
]


def prepend_commit_msg(text):
    """Prepend the commit message with `text`"""
    message_file = sys.argv[1]
    with open(message_file) as f:
        contents = f.read()
    with open(message_file, "w") as f:
        # Don't append if it's already there
        if not contents.startswith(text):
            f.write(text)
        f.write(contents)


def check_commit_header(text):
    message_file = sys.argv[1]
    with open(message_file) as f:
        first_line = f.readline()
    if not first_line.startswith(text):
        msg = (
            "The supplied commit message does not contain a reference "
            "to an issue number in a known format. Please make sure to "
            "reference TFS issue numbers in commit messages. Do you want to "
        )
        return msg
    else:
        return ""


if __name__ == "__main__":
    # 1-3 arguments are passed to this hook, the file id, the source and commit-SHA1
    if len(sys.argv) > 2:
        # In case of merge or flag (-c, -t, -m)
        # Second argument can be 'message', 'template', 'merge', 'squash' or 'commit'
        if sys.argv[2] == "message":
            # For a message supplied via '-m' flag, check if issue is referenced
            issue_number, number_msg = hook_utils.get_issue_num_by_branch()
            comment_char, comment_msg = hook_utils.get_git_comment_char()
            if issue_number:
                if comment_char == hook_utils.GIT_DEFAULT_COMMENT_CHAR:
                    header = " #" + issue_number + "\n"
                else:
                    header = "#" + issue_number + "\n"
                # Check existing commit message
                header_msg = check_commit_header(header)
            else:
                header_msg = ""
            # Print possible error messages and let user decide on progression
            err_msg = "\n".join(filter(None, [number_msg, comment_msg, header_msg]))
            if err_msg:
                # Needed for user input in git-hooks
                sys.stdin = open("/dev/tty")
                options = ["continue", "abort"]
                user_choice = hook_utils.ask_user_choice(
                    err_msg + "\n Do you want to ", options
                )
                if user_choice == "abort":
                    sys.exit(1)
        else:
            # Currently no further checks
            pass
    else:
        # Normal commit procedure with only 1 input
        # Fail silently
        try:
            # Try to determine issue number and catch any messages
            issue_number, number_msg = hook_utils.get_issue_num_by_branch()
            if issue_number:
                # For a valid issue number prepend to commit message
                comment_char, comment_msg = hook_utils.get_git_comment_char()
                # Trick issue number reference in case the # is used for git comments
                if comment_char == hook_utils.GIT_DEFAULT_COMMENT_CHAR:
                    header = " #" + issue_number + "\n"
                else:
                    header = "#" + issue_number + "\n"
                # Add good commit rules
                header += "\n".join(
                    f"{comment_char}{rule}" for rule in GOOD_COMMIT_RULES
                )
                # Add possible error message
                err_msg = "\n".join(filter(None, [number_msg, comment_msg]))
                if err_msg:
                    prepend_commit_msg("\n".join([header, err_msg]))
                else:
                    prepend_commit_msg(header)
            else:
                # In case no issue number could be found prepend error messages
                prepend_commit_msg(number_msg)
        except Exception:
            print("Error in preparing commit message, you're on your own")
            pass
